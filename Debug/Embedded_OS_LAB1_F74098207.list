
Embedded_OS_LAB1_F74098207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800432c  0800432c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004334  08004334  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800433c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c9c  20000010  0800434c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cac  0800434c  00023cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbcf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002425  00000000  00000000  0002fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  00032038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211c0  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad8c  00000000  00000000  00054d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdac2  00000000  00000000  0005fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039fc  00000000  00000000  0012d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042cc 	.word	0x080042cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080042cc 	.word	0x080042cc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <led_task>:
typedef struct {
	char msg;
} queue_item_t;

void led_task(void *param)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	queue_item_t rx_item;
	char key = 1;
 80004d8:	2301      	movs	r3, #1
 80004da:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
		if (key)
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d042      	beq.n	8000568 <led_task+0x98>
				// reset
//				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);

				// green LED for 5 sec
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e8:	482c      	ldr	r0, [pc, #176]	; (800059c <led_task+0xcc>)
 80004ea:	f000 fd35 	bl	8000f58 <HAL_GPIO_WritePin>

				if (xQueueReceive(qh, &rx_item, 5000)) {
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <led_task+0xd0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f107 010c 	add.w	r1, r7, #12
 80004f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 ff00 	bl	8002300 <xQueueReceive>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <led_task+0x48>
					// recv -> switch LED state
					HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <led_task+0xcc>)
 800050e:	f000 fd23 	bl	8000f58 <HAL_GPIO_WritePin>
					key = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
					break;
 8000516:	e03f      	b.n	8000598 <led_task+0xc8>
				}

				// else: red LED for 5 sec
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <led_task+0xcc>)
 8000520:	f000 fd1a 	bl	8000f58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	481c      	ldr	r0, [pc, #112]	; (800059c <led_task+0xcc>)
 800052c:	f000 fd14 	bl	8000f58 <HAL_GPIO_WritePin>
				if (xQueueReceive(qh, &rx_item, 5000)) {
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <led_task+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f107 010c 	add.w	r1, r7, #12
 8000538:	f241 3288 	movw	r2, #5000	; 0x1388
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fedf 	bl	8002300 <xQueueReceive>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <led_task+0x8a>
					HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <led_task+0xcc>)
 8000550:	f000 fd02 	bl	8000f58 <HAL_GPIO_WritePin>
					key = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
					break;
 8000558:	e01e      	b.n	8000598 <led_task+0xc8>
				}
					// recv -> switch LED state
//					key = 0;
//					break;
//				k = 1;
				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <led_task+0xcc>)
 8000562:	f000 fcf9 	bl	8000f58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_SET);
 8000566:	e7bc      	b.n	80004e2 <led_task+0x12>
				// reset
//				HAL_GPIO_WritePin(Green_LED_GPIO_Port, GPIO_PIN_12, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);

				// blink
				HAL_GPIO_TogglePin(Red_LED_GPIO_Port, GPIO_PIN_14);
 8000568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <led_task+0xcc>)
 800056e:	f000 fd0c 	bl	8000f8a <HAL_GPIO_TogglePin>
				if (xQueueReceive(qh, &rx_item, 100)) {
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <led_task+0xd0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f107 010c 	add.w	r1, r7, #12
 800057a:	2264      	movs	r2, #100	; 0x64
 800057c:	4618      	mov	r0, r3
 800057e:	f001 febf 	bl	8002300 <xQueueReceive>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0ef      	beq.n	8000568 <led_task+0x98>
					// recv -> switch LED state
					HAL_GPIO_WritePin(Red_LED_GPIO_Port, GPIO_PIN_14, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <led_task+0xcc>)
 8000590:	f000 fce2 	bl	8000f58 <HAL_GPIO_WritePin>
					key = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
		if (key)
 8000598:	e7a0      	b.n	80004dc <led_task+0xc>
 800059a:	bf00      	nop
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	2000002c 	.word	0x2000002c

080005a4 <button_task>:
		}
	}
}

void button_task(void *param)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	queue_item_t tx_item;
	char prev_state = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
	char current_state = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73bb      	strb	r3, [r7, #14]

	while (1)
	{
		current_state = HAL_GPIO_ReadPin(Blue_Button_GPIO_Port, GPIO_PIN_0);
 80005b4:	2101      	movs	r1, #1
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <button_task+0x4c>)
 80005b8:	f000 fcb6 	bl	8000f28 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	73bb      	strb	r3, [r7, #14]

		if (current_state == 0) {
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d102      	bne.n	80005cc <button_task+0x28>
			prev_state = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e7f3      	b.n	80005b4 <button_task+0x10>
		}
		else if (current_state > 0 && prev_state == 0) {
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f0      	beq.n	80005b4 <button_task+0x10>
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ed      	bne.n	80005b4 <button_task+0x10>
			xQueueSend(qh, &tx_item, 0);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <button_task+0x50>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f107 010c 	add.w	r1, r7, #12
 80005e0:	2300      	movs	r3, #0
 80005e2:	2200      	movs	r2, #0
 80005e4:	f001 fcfe 	bl	8001fe4 <xQueueGenericSend>
			prev_state = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
		current_state = HAL_GPIO_ReadPin(Blue_Button_GPIO_Port, GPIO_PIN_0);
 80005ec:	e7e2      	b.n	80005b4 <button_task+0x10>
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <main>:
		}
	}
}

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
  HAL_Init();
 80005fe:	f000 f9d5 	bl	80009ac <HAL_Init>
  SystemClock_Config();
 8000602:	f000 f82d 	bl	8000660 <SystemClock_Config>
  MX_GPIO_Init();
 8000606:	f000 f889 	bl	800071c <MX_GPIO_Init>

  qh = xQueueCreate(5, sizeof(queue_item_t));
 800060a:	2200      	movs	r2, #0
 800060c:	2101      	movs	r1, #1
 800060e:	2005      	movs	r0, #5
 8000610:	f001 fc8a 	bl	8001f28 <xQueueGenericCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <main+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  xTaskCreate(button_task, "detect_task", 256, NULL, 0, NULL);
 800061a:	2300      	movs	r3, #0
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2300      	movs	r3, #0
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <main+0x58>)
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0x5c>)
 800062c:	f002 f8b0 	bl	8002790 <xTaskCreate>
  xTaskCreate(led_task, "led_task", 256, NULL, 0, NULL);
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2300      	movs	r3, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800063e:	4906      	ldr	r1, [pc, #24]	; (8000658 <main+0x60>)
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0x64>)
 8000642:	f002 f8a5 	bl	8002790 <xTaskCreate>

  vTaskStartScheduler();
 8000646:	f002 f9e1 	bl	8002a0c <vTaskStartScheduler>

  while (1){
 800064a:	e7fe      	b.n	800064a <main+0x52>
 800064c:	2000002c 	.word	0x2000002c
 8000650:	080042e4 	.word	0x080042e4
 8000654:	080005a5 	.word	0x080005a5
 8000658:	080042f0 	.word	0x080042f0
 800065c:	080004d1 	.word	0x080004d1

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fe23 	bl	80042ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc75 	bl	8000fc0 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f882 	bl	80007e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fed0 	bl	80014a0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 f86d 	bl	80007e4 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <MX_GPIO_Init+0x98>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_GPIO_Init+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000772:	f000 fbf1 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_GPIO_Init+0xa0>)
 800078a:	f000 fa33 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 800078e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0x9c>)
 80007a8:	f000 fa24 	bl	8000bf4 <HAL_GPIO_Init>
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d2:	f000 f90d 	bl	80009f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40001000 	.word	0x40001000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1);
 80007ea:	e7fe      	b.n	80007ea <Error_Handler+0x6>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2036      	movs	r0, #54	; 0x36
 8000852:	f000 f9a5 	bl	8000ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000856:	2036      	movs	r0, #54	; 0x36
 8000858:	f000 f9be 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_InitTick+0xa0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_InitTick+0xa0>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_InitTick+0xa0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ffc4 	bl	8001810 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f000 ffae 	bl	80017e8 <HAL_RCC_GetPCLK1Freq>
 800088c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <HAL_InitTick+0xa4>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3b01      	subs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_InitTick+0xa8>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_InitTick+0xac>)
 80008a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_InitTick+0xa8>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_InitTick+0xa8>)
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_InitTick+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_InitTick+0xa8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_InitTick+0xa8>)
 80008be:	f000 ffd9 	bl	8001874 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <HAL_InitTick+0xa8>)
 80008ca:	f001 f808 	bl	80018de <HAL_TIM_Base_Start_IT>
 80008ce:	4603      	mov	r3, r0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	20003c28 	.word	0x20003c28
 80008e8:	40001000 	.word	0x40001000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <TIM6_DAC_IRQHandler+0x10>)
 800091e:	f001 f802 	bl	8001926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20003c28 	.word	0x20003c28

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <SystemInit+0x28>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <SystemInit+0x28>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <SystemInit+0x28>)
 8000942:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000946:	609a      	str	r2, [r3, #8]
#endif
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800095c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800095e:	e003      	b.n	8000968 <LoopCopyDataInit>

08000960 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000962:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000964:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000966:	3104      	adds	r1, #4

08000968 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800096c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800096e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000970:	d3f6      	bcc.n	8000960 <CopyDataInit>
  ldr  r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000974:	e002      	b.n	800097c <LoopFillZerobss>

08000976 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000976:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000978:	f842 3b04 	str.w	r3, [r2], #4

0800097c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800097e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000980:	d3f9      	bcc.n	8000976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd3 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fc69 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fe35 	bl	80005f8 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000994:	0800433c 	.word	0x0800433c
  ldr  r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800099c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80009a0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009a4:	20003cac 	.word	0x20003cac

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	; (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f8d8 	bl	8000b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ff2e 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff ff04 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20003c68 	.word	0x20003c68

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20003c68 	.word	0x20003c68

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff4c 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb2:	f7ff ff61 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	6978      	ldr	r0, [r7, #20]
 8000bbe:	f7ff ffb1 	bl	8000b24 <NVIC_EncodePriority>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff80 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff54 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e16b      	b.n	8000ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 815a 	bne.w	8000ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d00b      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d007      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c42:	2b11      	cmp	r3, #17
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0xfc>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80b4 	beq.w	8000ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a5e      	ldr	r2, [pc, #376]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a5a      	ldr	r2, [pc, #360]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <HAL_GPIO_Init+0x310>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d02b      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d025      	beq.n	8000e16 <HAL_GPIO_Init+0x222>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01f      	beq.n	8000e12 <HAL_GPIO_Init+0x21e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x216>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x212>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4b      	ldr	r2, [pc, #300]	; (8000f1c <HAL_GPIO_Init+0x328>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x20e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x20a>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e00e      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000dfe:	2308      	movs	r3, #8
 8000e00:	e00c      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e00a      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e008      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e004      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e002      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	f002 0203 	and.w	r2, r2, #3
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4093      	lsls	r3, r2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	4934      	ldr	r1, [pc, #208]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f67f ae90 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021c00 	.word	0x40021c00
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d104      	bne.n	8000fae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	041a      	lsls	r2, r3, #16
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e25b      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d075      	beq.n	80010ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fde:	4ba3      	ldr	r3, [pc, #652]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d00c      	beq.n	8001004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fea:	4ba0      	ldr	r3, [pc, #640]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d112      	bne.n	800101c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff6:	4b9d      	ldr	r3, [pc, #628]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001002:	d10b      	bne.n	800101c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	4b99      	ldr	r3, [pc, #612]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d05b      	beq.n	80010c8 <HAL_RCC_OscConfig+0x108>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d157      	bne.n	80010c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e236      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d106      	bne.n	8001034 <HAL_RCC_OscConfig+0x74>
 8001026:	4b91      	ldr	r3, [pc, #580]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a90      	ldr	r2, [pc, #576]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e01d      	b.n	8001070 <HAL_RCC_OscConfig+0xb0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x98>
 800103e:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a8a      	ldr	r2, [pc, #552]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b88      	ldr	r3, [pc, #544]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a87      	ldr	r2, [pc, #540]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0xb0>
 8001058:	4b84      	ldr	r3, [pc, #528]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a83      	ldr	r2, [pc, #524]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b81      	ldr	r3, [pc, #516]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a80      	ldr	r2, [pc, #512]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fcce 	bl	8000a18 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcca 	bl	8000a18 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1fb      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0xc0>
 800109e:	e014      	b.n	80010ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fcba 	bl	8000a18 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fcb6 	bl	8000a18 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e1e7      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0xe8>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d063      	beq.n	800119e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e2:	4b62      	ldr	r3, [pc, #392]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d116      	bne.n	8001128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x152>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d001      	beq.n	8001112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e1bb      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4952      	ldr	r1, [pc, #328]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	e03a      	b.n	800119e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001130:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <HAL_RCC_OscConfig+0x2b0>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001136:	f7ff fc6f 	bl	8000a18 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fc6b 	bl	8000a18 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e19c      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	4b46      	ldr	r3, [pc, #280]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4940      	ldr	r1, [pc, #256]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e015      	b.n	800119e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001172:	4b3f      	ldr	r3, [pc, #252]	; (8001270 <HAL_RCC_OscConfig+0x2b0>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fc4e 	bl	8000a18 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff fc4a 	bl	8000a18 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e17b      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	4b36      	ldr	r3, [pc, #216]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d030      	beq.n	800120c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d016      	beq.n	80011e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x2b4>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b8:	f7ff fc2e 	bl	8000a18 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc2a 	bl	8000a18 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e15b      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x200>
 80011de:	e015      	b.n	800120c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x2b4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fc17 	bl	8000a18 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc13 	bl	8000a18 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e144      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a0 	beq.w	800135a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10f      	bne.n	800124a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_RCC_OscConfig+0x2ac>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_OscConfig+0x2b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d121      	bne.n	800129a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_RCC_OscConfig+0x2b8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_RCC_OscConfig+0x2b8>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fbd9 	bl	8000a18 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e011      	b.n	800128e <HAL_RCC_OscConfig+0x2ce>
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	42470000 	.word	0x42470000
 8001274:	42470e80 	.word	0x42470e80
 8001278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127c:	f7ff fbcc 	bl	8000a18 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e0fd      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	4b81      	ldr	r3, [pc, #516]	; (8001494 <HAL_RCC_OscConfig+0x4d4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2f0>
 80012a2:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a7c      	ldr	r2, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	e01c      	b.n	80012ea <HAL_RCC_OscConfig+0x32a>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d10c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x312>
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	4a76      	ldr	r2, [pc, #472]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6713      	str	r3, [r2, #112]	; 0x70
 80012c4:	4b74      	ldr	r3, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c8:	4a73      	ldr	r2, [pc, #460]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6713      	str	r3, [r2, #112]	; 0x70
 80012d0:	e00b      	b.n	80012ea <HAL_RCC_OscConfig+0x32a>
 80012d2:	4b71      	ldr	r3, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a70      	ldr	r2, [pc, #448]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	4b6e      	ldr	r3, [pc, #440]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a6d      	ldr	r2, [pc, #436]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d015      	beq.n	800131e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb91 	bl	8000a18 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fb8d 	bl	8000a18 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	; 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e0bc      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ee      	beq.n	80012fa <HAL_RCC_OscConfig+0x33a>
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb7b 	bl	8000a18 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fb77 	bl	8000a18 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	; 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0a6      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ee      	bne.n	8001326 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a51      	ldr	r2, [pc, #324]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8092 	beq.w	8001488 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d05c      	beq.n	800142a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d141      	bne.n	80013fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <HAL_RCC_OscConfig+0x4dc>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb4b 	bl	8000a18 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb47 	bl	8000a18 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e078      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69da      	ldr	r2, [r3, #28]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	019b      	lsls	r3, r3, #6
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	3b01      	subs	r3, #1
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	061b      	lsls	r3, r3, #24
 80013c8:	4933      	ldr	r1, [pc, #204]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x4dc>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb20 	bl	8000a18 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fb1c 	bl	8000a18 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e04d      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x41c>
 80013fa:	e045      	b.n	8001488 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_OscConfig+0x4dc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fb09 	bl	8000a18 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fb05 	bl	8000a18 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e036      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x44a>
 8001428:	e02e      	b.n	8001488 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e029      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_RCC_OscConfig+0x4d8>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	429a      	cmp	r2, r3
 8001448:	d11c      	bne.n	8001484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d115      	bne.n	8001484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800145e:	4013      	ands	r3, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001464:	4293      	cmp	r3, r2
 8001466:	d10d      	bne.n	8001484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d106      	bne.n	8001484 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000
 8001498:	40023800 	.word	0x40023800
 800149c:	42470060 	.word	0x42470060

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0cc      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d90c      	bls.n	80014dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d044      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d119      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	2b03      	cmp	r3, #3
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e067      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4934      	ldr	r1, [pc, #208]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa42 	bl	8000a18 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fa3e 	bl	8000a18 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20c      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4601      	mov	r1, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	fa21 f303 	lsr.w	r3, r1, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f8f8 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00
 800165c:	40023800 	.word	0x40023800
 8001660:	08004314 	.word	0x08004314
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001682:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b04      	cmp	r3, #4
 800168c:	d007      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x32>
 800168e:	2b08      	cmp	r3, #8
 8001690:	d008      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 808d 	bne.w	80017b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800169a:	60bb      	str	r3, [r7, #8]
       break;
 800169c:	e08c      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800169e:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016a0:	60bb      	str	r3, [r7, #8]
      break;
 80016a2:	e089      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a4:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ae:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d023      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	f04f 0400 	mov.w	r4, #0
 80016c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	ea03 0501 	and.w	r5, r3, r1
 80016d0:	ea04 0602 	and.w	r6, r4, r2
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016d6:	fb02 f106 	mul.w	r1, r2, r6
 80016da:	2200      	movs	r2, #0
 80016dc:	fb02 f205 	mul.w	r2, r2, r5
 80016e0:	440a      	add	r2, r1
 80016e2:	493a      	ldr	r1, [pc, #232]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016e4:	fba5 0101 	umull	r0, r1, r5, r1
 80016e8:	1853      	adds	r3, r2, r1
 80016ea:	4619      	mov	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	f7fe fd6b 	bl	80001d0 <__aeabi_uldivmod>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e049      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	ea03 0501 	and.w	r5, r3, r1
 8001718:	ea04 0602 	and.w	r6, r4, r2
 800171c:	4629      	mov	r1, r5
 800171e:	4632      	mov	r2, r6
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	f04f 0400 	mov.w	r4, #0
 8001728:	0154      	lsls	r4, r2, #5
 800172a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800172e:	014b      	lsls	r3, r1, #5
 8001730:	4619      	mov	r1, r3
 8001732:	4622      	mov	r2, r4
 8001734:	1b49      	subs	r1, r1, r5
 8001736:	eb62 0206 	sbc.w	r2, r2, r6
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	f04f 0400 	mov.w	r4, #0
 8001742:	0194      	lsls	r4, r2, #6
 8001744:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001748:	018b      	lsls	r3, r1, #6
 800174a:	1a5b      	subs	r3, r3, r1
 800174c:	eb64 0402 	sbc.w	r4, r4, r2
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	00e2      	lsls	r2, r4, #3
 800175a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800175e:	00d9      	lsls	r1, r3, #3
 8001760:	460b      	mov	r3, r1
 8001762:	4614      	mov	r4, r2
 8001764:	195b      	adds	r3, r3, r5
 8001766:	eb44 0406 	adc.w	r4, r4, r6
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	02a2      	lsls	r2, r4, #10
 8001774:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001778:	0299      	lsls	r1, r3, #10
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	4618      	mov	r0, r3
 8001780:	4621      	mov	r1, r4
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f04f 0400 	mov.w	r4, #0
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	f7fe fd20 	bl	80001d0 <__aeabi_uldivmod>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0c1b      	lsrs	r3, r3, #16
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	3301      	adds	r3, #1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	60bb      	str	r3, [r7, #8]
      break;
 80017b0:	e002      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017b4:	60bb      	str	r3, [r7, #8]
      break;
 80017b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b8:	68bb      	ldr	r3, [r7, #8]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	017d7840 	.word	0x017d7840

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000

080017e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017f0:	4601      	mov	r1, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0a9b      	lsrs	r3, r3, #10
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	08004324 	.word	0x08004324

08001810 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	220f      	movs	r2, #15
 800181e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_GetClockConfig+0x5c>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_RCC_GetClockConfig+0x5c>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_GetClockConfig+0x5c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_GetClockConfig+0x5c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_RCC_GetClockConfig+0x60>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 020f 	and.w	r2, r3, #15
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e01d      	b.n	80018c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f815 	bl	80018ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3304      	adds	r3, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f000 f968 	bl	8001b88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b06      	cmp	r3, #6
 8001906:	d007      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b02      	cmp	r3, #2
 800193a:	d122      	bne.n	8001982 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d11b      	bne.n	8001982 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0202 	mvn.w	r2, #2
 8001952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f8ee 	bl	8001b4a <HAL_TIM_IC_CaptureCallback>
 800196e:	e005      	b.n	800197c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f8e0 	bl	8001b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f8f1 	bl	8001b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b04      	cmp	r3, #4
 800198e:	d122      	bne.n	80019d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b04      	cmp	r3, #4
 800199c:	d11b      	bne.n	80019d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0204 	mvn.w	r2, #4
 80019a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f8c4 	bl	8001b4a <HAL_TIM_IC_CaptureCallback>
 80019c2:	e005      	b.n	80019d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8b6 	bl	8001b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8c7 	bl	8001b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d122      	bne.n	8001a2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11b      	bne.n	8001a2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0208 	mvn.w	r2, #8
 80019fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f89a 	bl	8001b4a <HAL_TIM_IC_CaptureCallback>
 8001a16:	e005      	b.n	8001a24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f88c 	bl	8001b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f89d 	bl	8001b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d122      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d11b      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f06f 0210 	mvn.w	r2, #16
 8001a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2208      	movs	r2, #8
 8001a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f870 	bl	8001b4a <HAL_TIM_IC_CaptureCallback>
 8001a6a:	e005      	b.n	8001a78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f862 	bl	8001b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f873 	bl	8001b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10e      	bne.n	8001aaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0201 	mvn.w	r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe fe8b 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	2b80      	cmp	r3, #128	; 0x80
 8001ab6:	d10e      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b80      	cmp	r3, #128	; 0x80
 8001ac4:	d107      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f903 	bl	8001cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae0:	2b40      	cmp	r3, #64	; 0x40
 8001ae2:	d10e      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b40      	cmp	r3, #64	; 0x40
 8001af0:	d107      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f838 	bl	8001b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d10e      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d107      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0220 	mvn.w	r2, #32
 8001b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8cd 	bl	8001cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a40      	ldr	r2, [pc, #256]	; (8001c9c <TIM_Base_SetConfig+0x114>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <TIM_Base_SetConfig+0x40>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba6:	d00f      	beq.n	8001bc8 <TIM_Base_SetConfig+0x40>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3d      	ldr	r2, [pc, #244]	; (8001ca0 <TIM_Base_SetConfig+0x118>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00b      	beq.n	8001bc8 <TIM_Base_SetConfig+0x40>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	; (8001ca4 <TIM_Base_SetConfig+0x11c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <TIM_Base_SetConfig+0x40>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <TIM_Base_SetConfig+0x120>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <TIM_Base_SetConfig+0x40>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <TIM_Base_SetConfig+0x124>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <TIM_Base_SetConfig+0x114>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02b      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d027      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <TIM_Base_SetConfig+0x118>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d023      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <TIM_Base_SetConfig+0x11c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <TIM_Base_SetConfig+0x120>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01b      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a29      	ldr	r2, [pc, #164]	; (8001cac <TIM_Base_SetConfig+0x124>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d017      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	; (8001cb0 <TIM_Base_SetConfig+0x128>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <TIM_Base_SetConfig+0x12c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00f      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <TIM_Base_SetConfig+0x130>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00b      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <TIM_Base_SetConfig+0x134>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <TIM_Base_SetConfig+0x138>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d003      	beq.n	8001c3a <TIM_Base_SetConfig+0xb2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <TIM_Base_SetConfig+0x13c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d108      	bne.n	8001c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <TIM_Base_SetConfig+0x114>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d003      	beq.n	8001c80 <TIM_Base_SetConfig+0xf8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <TIM_Base_SetConfig+0x124>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d103      	bne.n	8001c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	615a      	str	r2, [r3, #20]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40000c00 	.word	0x40000c00
 8001cac:	40010400 	.word	0x40010400
 8001cb0:	40014000 	.word	0x40014000
 8001cb4:	40014400 	.word	0x40014400
 8001cb8:	40014800 	.word	0x40014800
 8001cbc:	40001800 	.word	0x40001800
 8001cc0:	40001c00 	.word	0x40001c00
 8001cc4:	40002000 	.word	0x40002000

08001cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0208 	add.w	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f103 0208 	add.w	r2, r3, #8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 0208 	add.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d103      	bne.n	8001db2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e00c      	b.n	8001dcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3308      	adds	r3, #8
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e002      	b.n	8001dc0 <vListInsert+0x2e>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d2f6      	bcs.n	8001dba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6892      	ldr	r2, [r2, #8]
 8001e1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6852      	ldr	r2, [r2, #4]
 8001e24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d103      	bne.n	8001e38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1e5a      	subs	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	e7fe      	b.n	8001e7e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001e80:	f001 fefc 	bl	8003c7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	441a      	add	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	441a      	add	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	22ff      	movs	r2, #255	; 0xff
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	22ff      	movs	r2, #255	; 0xff
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d114      	bne.n	8001f00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01a      	beq.n	8001f14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fff8 	bl	8002ed8 <xTaskRemoveFromEventList>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <xQueueGenericReset+0xcc>)
 8001ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	f3bf 8f6f 	isb	sy
 8001efe:	e009      	b.n	8001f14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3310      	adds	r3, #16
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fef3 	bl	8001cf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3324      	adds	r3, #36	; 0x24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff feee 	bl	8001cf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f14:	f001 fee0 	bl	8003cd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <xQueueGenericCreate+0x28>
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e7fe      	b.n	8001f4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e004      	b.n	8001f66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3350      	adds	r3, #80	; 0x50
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 ffa0 	bl	8003eb0 <pvPortMalloc>
 8001f70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3350      	adds	r3, #80	; 0x50
 8001f80:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f805 	bl	8001f9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f94:	69bb      	ldr	r3, [r7, #24]
	}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e002      	b.n	8001fc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fcc:	2101      	movs	r1, #1
 8001fce:	69b8      	ldr	r0, [r7, #24]
 8001fd0:	f7ff ff42 	bl	8001e58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <xQueueGenericSend+0x30>
 8002000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
 8002012:	e7fe      	b.n	8002012 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <xQueueGenericSend+0x3e>
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <xQueueGenericSend+0x42>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xQueueGenericSend+0x44>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <xQueueGenericSend+0x5c>
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	e7fe      	b.n	800203e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d103      	bne.n	800204e <xQueueGenericSend+0x6a>
 8002046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <xQueueGenericSend+0x6e>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <xQueueGenericSend+0x70>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <xQueueGenericSend+0x88>
 8002058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	e7fe      	b.n	800206a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800206c:	f001 f8cc 	bl	8003208 <xTaskGetSchedulerState>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <xQueueGenericSend+0x98>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <xQueueGenericSend+0x9c>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <xQueueGenericSend+0x9e>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <xQueueGenericSend+0xb6>
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	e7fe      	b.n	8002098 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800209a:	f001 fdef 	bl	8003c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <xQueueGenericSend+0xcc>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d129      	bne.n	8002104 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b6:	f000 f9ff 	bl	80024b8 <prvCopyDataToQueue>
 80020ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	3324      	adds	r3, #36	; 0x24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 ff05 	bl	8002ed8 <xTaskRemoveFromEventList>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <xQueueGenericSend+0x1f0>)
 80020d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	e00a      	b.n	80020fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <xQueueGenericSend+0x1f0>)
 80020ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020fc:	f001 fdec 	bl	8003cd8 <vPortExitCritical>
				return pdPASS;
 8002100:	2301      	movs	r3, #1
 8002102:	e063      	b.n	80021cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800210a:	f001 fde5 	bl	8003cd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800210e:	2300      	movs	r3, #0
 8002110:	e05c      	b.n	80021cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4618      	mov	r0, r3
 800211e:	f000 ff3d 	bl	8002f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002122:	2301      	movs	r3, #1
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002126:	f001 fdd7 	bl	8003cd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800212a:	f000 fcbb 	bl	8002aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800212e:	f001 fda5 	bl	8003c7c <vPortEnterCritical>
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002138:	b25b      	sxtb	r3, r3
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213e:	d103      	bne.n	8002148 <xQueueGenericSend+0x164>
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214e:	b25b      	sxtb	r3, r3
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002154:	d103      	bne.n	800215e <xQueueGenericSend+0x17a>
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800215e:	f001 fdbb 	bl	8003cd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002162:	1d3a      	adds	r2, r7, #4
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 ff2c 	bl	8002fc8 <xTaskCheckForTimeOut>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d124      	bne.n	80021c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002178:	f000 fa96 	bl	80026a8 <prvIsQueueFull>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d018      	beq.n	80021b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	3310      	adds	r3, #16
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fe56 	bl	8002e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002192:	f000 fa21 	bl	80025d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002196:	f000 fc93 	bl	8002ac0 <xTaskResumeAll>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f af7c 	bne.w	800209a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <xQueueGenericSend+0x1f0>)
 80021a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	e772      	b.n	800209a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b6:	f000 fa0f 	bl	80025d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021ba:	f000 fc81 	bl	8002ac0 <xTaskResumeAll>
 80021be:	e76c      	b.n	800209a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021c2:	f000 fa09 	bl	80025d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021c6:	f000 fc7b 	bl	8002ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3738      	adds	r7, #56	; 0x38
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	e000ed04 	.word	0xe000ed04

080021d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <xQueueGenericSendFromISR+0x2c>
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e7fe      	b.n	8002202 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <xQueueGenericSendFromISR+0x3a>
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <xQueueGenericSendFromISR+0x3e>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <xQueueGenericSendFromISR+0x40>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <xQueueGenericSendFromISR+0x58>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	623b      	str	r3, [r7, #32]
 800222e:	e7fe      	b.n	800222e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d103      	bne.n	800223e <xQueueGenericSendFromISR+0x66>
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <xQueueGenericSendFromISR+0x6a>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <xQueueGenericSendFromISR+0x6c>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <xQueueGenericSendFromISR+0x84>
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e7fe      	b.n	800225a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800225c:	f001 fdea 	bl	8003e34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002260:	f3ef 8211 	mrs	r2, BASEPRI
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	61ba      	str	r2, [r7, #24]
 8002276:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002278:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <xQueueGenericSendFromISR+0xb6>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d12c      	bne.n	80022e8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800229e:	f000 f90b 	bl	80024b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022aa:	d112      	bne.n	80022d2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	3324      	adds	r3, #36	; 0x24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fe0d 	bl	8002ed8 <xTaskRemoveFromEventList>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	b25a      	sxtb	r2, r3
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022e2:	2301      	movs	r3, #1
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80022e6:	e001      	b.n	80022ec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3738      	adds	r7, #56	; 0x38
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <xQueueReceive+0x2e>
	__asm volatile
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	e7fe      	b.n	800232c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <xQueueReceive+0x3c>
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <xQueueReceive+0x40>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <xQueueReceive+0x42>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <xQueueReceive+0x5a>
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e7fe      	b.n	8002358 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800235a:	f000 ff55 	bl	8003208 <xTaskGetSchedulerState>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <xQueueReceive+0x6a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <xQueueReceive+0x6e>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <xQueueReceive+0x70>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <xQueueReceive+0x88>
 8002374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e7fe      	b.n	8002386 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002388:	f001 fc78 	bl	8003c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800239c:	f000 f8f6 	bl	800258c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00f      	beq.n	80023d0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	3310      	adds	r3, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fd8f 	bl	8002ed8 <xTaskRemoveFromEventList>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <xQueueReceive+0x1b4>)
 80023c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023d0:	f001 fc82 	bl	8003cd8 <vPortExitCritical>
				return pdPASS;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e069      	b.n	80024ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023de:	f001 fc7b 	bl	8003cd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e062      	b.n	80024ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fdd3 	bl	8002f9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023fa:	f001 fc6d 	bl	8003cd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023fe:	f000 fb51 	bl	8002aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002402:	f001 fc3b 	bl	8003c7c <vPortEnterCritical>
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800240c:	b25b      	sxtb	r3, r3
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002412:	d103      	bne.n	800241c <xQueueReceive+0x11c>
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002422:	b25b      	sxtb	r3, r3
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d103      	bne.n	8002432 <xQueueReceive+0x132>
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002432:	f001 fc51 	bl	8003cd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002436:	1d3a      	adds	r2, r7, #4
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fdc2 	bl	8002fc8 <xTaskCheckForTimeOut>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d123      	bne.n	8002492 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800244a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800244c:	f000 f916 	bl	800267c <prvIsQueueEmpty>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d017      	beq.n	8002486 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	3324      	adds	r3, #36	; 0x24
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fcec 	bl	8002e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002466:	f000 f8b7 	bl	80025d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800246a:	f000 fb29 	bl	8002ac0 <xTaskResumeAll>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d189      	bne.n	8002388 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <xQueueReceive+0x1b4>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	e780      	b.n	8002388 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002488:	f000 f8a6 	bl	80025d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800248c:	f000 fb18 	bl	8002ac0 <xTaskResumeAll>
 8002490:	e77a      	b.n	8002388 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002494:	f000 f8a0 	bl	80025d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002498:	f000 fb12 	bl	8002ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800249c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800249e:	f000 f8ed 	bl	800267c <prvIsQueueEmpty>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f43f af6f 	beq.w	8002388 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d14d      	bne.n	800257a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 feae 	bl	8003244 <xTaskPriorityDisinherit>
 80024e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e043      	b.n	800257a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d119      	bne.n	800252c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6858      	ldr	r0, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	461a      	mov	r2, r3
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	f001 fece 	bl	80042a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	441a      	add	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d32b      	bcc.n	800257a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	e026      	b.n	800257a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68d8      	ldr	r0, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	461a      	mov	r2, r3
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	f001 feb4 	bl	80042a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	425b      	negs	r3, r3
 8002546:	441a      	add	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d207      	bcs.n	8002568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	425b      	negs	r3, r3
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d105      	bne.n	800257a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	3b01      	subs	r3, #1
 8002578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002582:	697b      	ldr	r3, [r7, #20]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d018      	beq.n	80025d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	441a      	add	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d303      	bcc.n	80025c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68d9      	ldr	r1, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	461a      	mov	r2, r3
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f001 fe6a 	bl	80042a4 <memcpy>
	}
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025e0:	f001 fb4c 	bl	8003c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025ec:	e011      	b.n	8002612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3324      	adds	r3, #36	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fc6c 	bl	8002ed8 <xTaskRemoveFromEventList>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002606:	f000 fd3f 	bl	8003088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	3b01      	subs	r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	dce9      	bgt.n	80025ee <prvUnlockQueue+0x16>
 800261a:	e000      	b.n	800261e <prvUnlockQueue+0x46>
					break;
 800261c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	22ff      	movs	r2, #255	; 0xff
 8002622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002626:	f001 fb57 	bl	8003cd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800262a:	f001 fb27 	bl	8003c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002636:	e011      	b.n	800265c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3310      	adds	r3, #16
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fc47 	bl	8002ed8 <xTaskRemoveFromEventList>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002650:	f000 fd1a 	bl	8003088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	3b01      	subs	r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800265c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002660:	2b00      	cmp	r3, #0
 8002662:	dce9      	bgt.n	8002638 <prvUnlockQueue+0x60>
 8002664:	e000      	b.n	8002668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	22ff      	movs	r2, #255	; 0xff
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002670:	f001 fb32 	bl	8003cd8 <vPortExitCritical>
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002684:	f001 fafa 	bl	8003c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e001      	b.n	800269a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800269a:	f001 fb1d 	bl	8003cd8 <vPortExitCritical>

	return xReturn;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026b0:	f001 fae4 	bl	8003c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	429a      	cmp	r2, r3
 80026be:	d102      	bne.n	80026c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026c0:	2301      	movs	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e001      	b.n	80026ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026ca:	f001 fb05 	bl	8003cd8 <vPortExitCritical>

	return xReturn;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e014      	b.n	8002712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <vQueueAddToRegistry+0x4c>)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026f4:	490b      	ldr	r1, [pc, #44]	; (8002724 <vQueueAddToRegistry+0x4c>)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <vQueueAddToRegistry+0x4c>)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800270a:	e005      	b.n	8002718 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b07      	cmp	r3, #7
 8002716:	d9e7      	bls.n	80026e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20003c6c 	.word	0x20003c6c

08002728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002738:	f001 faa0 	bl	8003c7c <vPortEnterCritical>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002742:	b25b      	sxtb	r3, r3
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d103      	bne.n	8002752 <vQueueWaitForMessageRestricted+0x2a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002758:	b25b      	sxtb	r3, r3
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275e:	d103      	bne.n	8002768 <vQueueWaitForMessageRestricted+0x40>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002768:	f001 fab6 	bl	8003cd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fb81 	bl	8002e84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff28 	bl	80025d8 <prvUnlockQueue>
	}
 8002788:	bf00      	nop
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af04      	add	r7, sp, #16
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fb83 	bl	8003eb0 <pvPortMalloc>
 80027aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00e      	beq.n	80027d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027b2:	2058      	movs	r0, #88	; 0x58
 80027b4:	f001 fb7c 	bl	8003eb0 <pvPortMalloc>
 80027b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
 80027c6:	e005      	b.n	80027d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f001 fc33 	bl	8004034 <vPortFree>
 80027ce:	e001      	b.n	80027d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d013      	beq.n	8002802 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027da:	88fa      	ldrh	r2, [r7, #6]
 80027dc:	2300      	movs	r3, #0
 80027de:	9303      	str	r3, [sp, #12]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f80e 	bl	8002812 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027f6:	69f8      	ldr	r0, [r7, #28]
 80027f8:	f000 f89a 	bl	8002930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	e002      	b.n	8002808 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002808:	69bb      	ldr	r3, [r7, #24]
	}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b088      	sub	sp, #32
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	461a      	mov	r2, r3
 800282a:	21a5      	movs	r1, #165	; 0xa5
 800282c:	f001 fd45 	bl	80042ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800283a:	3b01      	subs	r3, #1
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f023 0307 	bic.w	r3, r3, #7
 8002848:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <prvInitialiseNewTask+0x56>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e7fe      	b.n	8002866 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e012      	b.n	800289a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	7819      	ldrb	r1, [r3, #0]
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	3334      	adds	r3, #52	; 0x34
 8002884:	460a      	mov	r2, r1
 8002886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d9e9      	bls.n	8002874 <prvInitialiseNewTask+0x62>
 80028a0:	e000      	b.n	80028a4 <prvInitialiseNewTask+0x92>
			{
				break;
 80028a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ac:	e003      	b.n	80028b6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d901      	bls.n	80028c0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028bc:	2304      	movs	r3, #4
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ca:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	2200      	movs	r2, #0
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	3304      	adds	r3, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fa2a 	bl	8001d30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	3318      	adds	r3, #24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fa25 	bl	8001d30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	f1c3 0205 	rsb	r2, r3, #5
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	2200      	movs	r2, #0
 8002900:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68f9      	ldr	r1, [r7, #12]
 800290e:	69b8      	ldr	r0, [r7, #24]
 8002910:	f001 f890 	bl	8003a34 <pxPortInitialiseStack>
 8002914:	4602      	mov	r2, r0
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002938:	f001 f9a0 	bl	8003c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <prvAddNewTaskToReadyList+0xc0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <prvAddNewTaskToReadyList+0xc0>)
 8002944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <prvAddNewTaskToReadyList+0xc4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <prvAddNewTaskToReadyList+0xc4>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <prvAddNewTaskToReadyList+0xc0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d110      	bne.n	800297e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800295c:	f000 fbb8 	bl	80030d0 <prvInitialiseTaskLists>
 8002960:	e00d      	b.n	800297e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <prvAddNewTaskToReadyList+0xc8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <prvAddNewTaskToReadyList+0xc4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	429a      	cmp	r2, r3
 8002976:	d802      	bhi.n	800297e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <prvAddNewTaskToReadyList+0xc4>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <prvAddNewTaskToReadyList+0xcc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <prvAddNewTaskToReadyList+0xcc>)
 8002986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <prvAddNewTaskToReadyList+0xcc>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <prvAddNewTaskToReadyList+0xd0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <prvAddNewTaskToReadyList+0xd0>)
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <prvAddNewTaskToReadyList+0xd4>)
 80029b0:	441a      	add	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7ff f9c6 	bl	8001d4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029be:	f001 f98b 	bl	8003cd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <prvAddNewTaskToReadyList+0xc8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00e      	beq.n	80029e8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <prvAddNewTaskToReadyList+0xc4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <prvAddNewTaskToReadyList+0xd8>)
 80029da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000108 	.word	0x20000108
 80029f4:	20000030 	.word	0x20000030
 80029f8:	20000114 	.word	0x20000114
 80029fc:	20000124 	.word	0x20000124
 8002a00:	20000110 	.word	0x20000110
 8002a04:	20000034 	.word	0x20000034
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <vTaskStartScheduler+0x80>)
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2282      	movs	r2, #130	; 0x82
 8002a1e:	491c      	ldr	r1, [pc, #112]	; (8002a90 <vTaskStartScheduler+0x84>)
 8002a20:	481c      	ldr	r0, [pc, #112]	; (8002a94 <vTaskStartScheduler+0x88>)
 8002a22:	f7ff feb5 	bl	8002790 <xTaskCreate>
 8002a26:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002a2e:	f000 fcf3 	bl	8003418 <xTimerCreateTimerTask>
 8002a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d115      	bne.n	8002a66 <vTaskStartScheduler+0x5a>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <vTaskStartScheduler+0x8c>)
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <vTaskStartScheduler+0x90>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <vTaskStartScheduler+0x94>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a60:	f001 f86e 	bl	8003b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a64:	e00d      	b.n	8002a82 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6c:	d109      	bne.n	8002a82 <vTaskStartScheduler+0x76>
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e7fe      	b.n	8002a80 <vTaskStartScheduler+0x74>
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000012c 	.word	0x2000012c
 8002a90:	080042fc 	.word	0x080042fc
 8002a94:	080030a1 	.word	0x080030a1
 8002a98:	20000128 	.word	0x20000128
 8002a9c:	20000114 	.word	0x20000114
 8002aa0:	2000010c 	.word	0x2000010c

08002aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <vTaskSuspendAll+0x18>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	4a03      	ldr	r2, [pc, #12]	; (8002abc <vTaskSuspendAll+0x18>)
 8002ab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000130 	.word	0x20000130

08002ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <xTaskResumeAll+0x2a>
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002aea:	f001 f8c7 	bl	8003c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002af6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002af8:	4b36      	ldr	r3, [pc, #216]	; (8002bd4 <xTaskResumeAll+0x114>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d161      	bne.n	8002bc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b00:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <xTaskResumeAll+0x118>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05d      	beq.n	8002bc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b08:	e02e      	b.n	8002b68 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <xTaskResumeAll+0x11c>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3318      	adds	r3, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f974 	bl	8001e04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f96f 	bl	8001e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <xTaskResumeAll+0x120>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <xTaskResumeAll+0x120>)
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <xTaskResumeAll+0x124>)
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7ff f8fb 	bl	8001d4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <xTaskResumeAll+0x128>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <xTaskResumeAll+0x12c>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <xTaskResumeAll+0x11c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1cc      	bne.n	8002b0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b76:	f000 fb27 	bl	80031c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <xTaskResumeAll+0x130>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b86:	f000 f847 	bl	8002c18 <xTaskIncrementTick>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <xTaskResumeAll+0x12c>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f1      	bne.n	8002b86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <xTaskResumeAll+0x130>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <xTaskResumeAll+0x12c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <xTaskResumeAll+0x134>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bc4:	f001 f888 	bl	8003cd8 <vPortExitCritical>

	return xAlreadyYielded;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000130 	.word	0x20000130
 8002bd8:	20000108 	.word	0x20000108
 8002bdc:	200000c8 	.word	0x200000c8
 8002be0:	20000110 	.word	0x20000110
 8002be4:	20000034 	.word	0x20000034
 8002be8:	20000030 	.word	0x20000030
 8002bec:	2000011c 	.word	0x2000011c
 8002bf0:	20000118 	.word	0x20000118
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <xTaskGetTickCount+0x1c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000010c 	.word	0x2000010c

08002c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <xTaskIncrementTick+0x144>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8087 	bne.w	8002d3a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c2c:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <xTaskIncrementTick+0x148>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <xTaskIncrementTick+0x148>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11f      	bne.n	8002c80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <xTaskIncrementTick+0x46>
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	e7fe      	b.n	8002c5c <xTaskIncrementTick+0x44>
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <xTaskIncrementTick+0x150>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3e      	ldr	r2, [pc, #248]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4a3e      	ldr	r2, [pc, #248]	; (8002d68 <xTaskIncrementTick+0x150>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <xTaskIncrementTick+0x154>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a3c      	ldr	r2, [pc, #240]	; (8002d6c <xTaskIncrementTick+0x154>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	f000 faa4 	bl	80031c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d348      	bcc.n	8002d1c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c9a:	601a      	str	r2, [r3, #0]
					break;
 8002c9c:	e03e      	b.n	8002d1c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c9e:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <xTaskIncrementTick+0x14c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d203      	bcs.n	8002cbe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cb6:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <xTaskIncrementTick+0x158>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002cbc:	e02e      	b.n	8002d1c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff f89e 	bl	8001e04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3318      	adds	r3, #24
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f895 	bl	8001e04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <xTaskIncrementTick+0x15c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <xTaskIncrementTick+0x15c>)
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <xTaskIncrementTick+0x160>)
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f7ff f821 	bl	8001d4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <xTaskIncrementTick+0x164>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3b9      	bcc.n	8002c8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d1a:	e7b6      	b.n	8002c8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <xTaskIncrementTick+0x164>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d22:	4915      	ldr	r1, [pc, #84]	; (8002d78 <xTaskIncrementTick+0x160>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d907      	bls.n	8002d44 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e004      	b.n	8002d44 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <xTaskIncrementTick+0x168>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <xTaskIncrementTick+0x168>)
 8002d42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <xTaskIncrementTick+0x16c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002d50:	697b      	ldr	r3, [r7, #20]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000130 	.word	0x20000130
 8002d60:	2000010c 	.word	0x2000010c
 8002d64:	200000c0 	.word	0x200000c0
 8002d68:	200000c4 	.word	0x200000c4
 8002d6c:	20000120 	.word	0x20000120
 8002d70:	20000128 	.word	0x20000128
 8002d74:	20000110 	.word	0x20000110
 8002d78:	20000034 	.word	0x20000034
 8002d7c:	20000030 	.word	0x20000030
 8002d80:	20000118 	.word	0x20000118
 8002d84:	2000011c 	.word	0x2000011c

08002d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <vTaskSwitchContext+0xa0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <vTaskSwitchContext+0xa4>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d9c:	e03e      	b.n	8002e1c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <vTaskSwitchContext+0xa4>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <vTaskSwitchContext+0xa8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	fab3 f383 	clz	r3, r3
 8002db0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002db2:	7afb      	ldrb	r3, [r7, #11]
 8002db4:	f1c3 031f 	rsb	r3, r3, #31
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	491e      	ldr	r1, [pc, #120]	; (8002e34 <vTaskSwitchContext+0xac>)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	e7fe      	b.n	8002de0 <vTaskSwitchContext+0x58>
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <vTaskSwitchContext+0xac>)
 8002dee:	4413      	add	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3308      	adds	r3, #8
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d104      	bne.n	8002e12 <vTaskSwitchContext+0x8a>
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <vTaskSwitchContext+0xb0>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	20000130 	.word	0x20000130
 8002e2c:	2000011c 	.word	0x2000011c
 8002e30:	20000110 	.word	0x20000110
 8002e34:	20000034 	.word	0x20000034
 8002e38:	20000030 	.word	0x20000030

08002e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <vTaskPlaceOnEventList+0x24>
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e7fe      	b.n	8002e5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <vTaskPlaceOnEventList+0x44>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3318      	adds	r3, #24
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe ff92 	bl	8001d92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e6e:	2101      	movs	r1, #1
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f000 fa6b 	bl	800334c <prvAddCurrentTaskToDelayedList>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000030 	.word	0x20000030

08002e84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <vTaskPlaceOnEventListRestricted+0x26>
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e7fe      	b.n	8002ea8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <vTaskPlaceOnEventListRestricted+0x50>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7fe ff49 	bl	8001d4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68b8      	ldr	r0, [r7, #8]
 8002ec8:	f000 fa40 	bl	800334c <prvAddCurrentTaskToDelayedList>
	}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000030 	.word	0x20000030

08002ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <xTaskRemoveFromEventList+0x2a>
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e7fe      	b.n	8002f00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3318      	adds	r3, #24
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe ff7c 	bl	8001e04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <xTaskRemoveFromEventList+0xac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11c      	bne.n	8002f4e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe ff73 	bl	8001e04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2201      	movs	r2, #1
 8002f24:	409a      	lsls	r2, r3
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <xTaskRemoveFromEventList+0xb0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <xTaskRemoveFromEventList+0xb0>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <xTaskRemoveFromEventList+0xb4>)
 8002f3e:	441a      	add	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe feff 	bl	8001d4a <vListInsertEnd>
 8002f4c:	e005      	b.n	8002f5a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3318      	adds	r3, #24
 8002f52:	4619      	mov	r1, r3
 8002f54:	480e      	ldr	r0, [pc, #56]	; (8002f90 <xTaskRemoveFromEventList+0xb8>)
 8002f56:	f7fe fef8 	bl	8001d4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <xTaskRemoveFromEventList+0xbc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d905      	bls.n	8002f74 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <xTaskRemoveFromEventList+0xc0>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e001      	b.n	8002f78 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f78:	697b      	ldr	r3, [r7, #20]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000130 	.word	0x20000130
 8002f88:	20000110 	.word	0x20000110
 8002f8c:	20000034 	.word	0x20000034
 8002f90:	200000c8 	.word	0x200000c8
 8002f94:	20000030 	.word	0x20000030
 8002f98:	2000011c 	.word	0x2000011c

08002f9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <vTaskInternalSetTimeOutState+0x24>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <vTaskInternalSetTimeOutState+0x28>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	605a      	str	r2, [r3, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	20000120 	.word	0x20000120
 8002fc4:	2000010c 	.word	0x2000010c

08002fc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <xTaskCheckForTimeOut+0x24>
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e7fe      	b.n	8002fea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <xTaskCheckForTimeOut+0x3e>
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e7fe      	b.n	8003004 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003006:	f000 fe39 	bl	8003c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800300a:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <xTaskCheckForTimeOut+0xb8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003022:	d102      	bne.n	800302a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e023      	b.n	8003072 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <xTaskCheckForTimeOut+0xbc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d007      	beq.n	8003046 <xTaskCheckForTimeOut+0x7e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e015      	b.n	8003072 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	d20b      	bcs.n	8003068 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff9d 	bl	8002f9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e004      	b.n	8003072 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800306e:	2301      	movs	r3, #1
 8003070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003072:	f000 fe31 	bl	8003cd8 <vPortExitCritical>

	return xReturn;
 8003076:	69fb      	ldr	r3, [r7, #28]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000010c 	.word	0x2000010c
 8003084:	20000120 	.word	0x20000120

08003088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <vTaskMissedYield+0x14>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	2000011c 	.word	0x2000011c

080030a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030a8:	f000 f852 	bl	8003150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <prvIdleTask+0x28>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d9f9      	bls.n	80030a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <prvIdleTask+0x2c>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030c4:	e7f0      	b.n	80030a8 <prvIdleTask+0x8>
 80030c6:	bf00      	nop
 80030c8:	20000034 	.word	0x20000034
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	e00c      	b.n	80030f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <prvInitialiseTaskLists+0x60>)
 80030e8:	4413      	add	r3, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe00 	bl	8001cf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3301      	adds	r3, #1
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d9ef      	bls.n	80030dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <prvInitialiseTaskLists+0x64>)
 80030fe:	f7fe fdf7 	bl	8001cf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003102:	480d      	ldr	r0, [pc, #52]	; (8003138 <prvInitialiseTaskLists+0x68>)
 8003104:	f7fe fdf4 	bl	8001cf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003108:	480c      	ldr	r0, [pc, #48]	; (800313c <prvInitialiseTaskLists+0x6c>)
 800310a:	f7fe fdf1 	bl	8001cf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800310e:	480c      	ldr	r0, [pc, #48]	; (8003140 <prvInitialiseTaskLists+0x70>)
 8003110:	f7fe fdee 	bl	8001cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <prvInitialiseTaskLists+0x74>)
 8003116:	f7fe fdeb 	bl	8001cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <prvInitialiseTaskLists+0x78>)
 800311c:	4a05      	ldr	r2, [pc, #20]	; (8003134 <prvInitialiseTaskLists+0x64>)
 800311e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <prvInitialiseTaskLists+0x7c>)
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <prvInitialiseTaskLists+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000034 	.word	0x20000034
 8003134:	20000098 	.word	0x20000098
 8003138:	200000ac 	.word	0x200000ac
 800313c:	200000c8 	.word	0x200000c8
 8003140:	200000dc 	.word	0x200000dc
 8003144:	200000f4 	.word	0x200000f4
 8003148:	200000c0 	.word	0x200000c0
 800314c:	200000c4 	.word	0x200000c4

08003150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003156:	e019      	b.n	800318c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003158:	f000 fd90 	bl	8003c7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <prvCheckTasksWaitingTermination+0x4c>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fe4b 	bl	8001e04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <prvCheckTasksWaitingTermination+0x50>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <prvCheckTasksWaitingTermination+0x50>)
 8003176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <prvCheckTasksWaitingTermination+0x54>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3b01      	subs	r3, #1
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <prvCheckTasksWaitingTermination+0x54>)
 8003180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003182:	f000 fda9 	bl	8003cd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f80e 	bl	80031a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <prvCheckTasksWaitingTermination+0x54>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e1      	bne.n	8003158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200000dc 	.word	0x200000dc
 80031a0:	20000108 	.word	0x20000108
 80031a4:	200000f0 	.word	0x200000f0

080031a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 ff3d 	bl	8004034 <vPortFree>
			vPortFree( pxTCB );
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 ff3a 	bl	8004034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <prvResetNextTaskUnblockTime+0x38>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <prvResetNextTaskUnblockTime+0x3c>)
 80031da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031e0:	e008      	b.n	80031f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <prvResetNextTaskUnblockTime+0x38>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <prvResetNextTaskUnblockTime+0x3c>)
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	200000c0 	.word	0x200000c0
 8003204:	20000128 	.word	0x20000128

08003208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <xTaskGetSchedulerState+0x34>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003216:	2301      	movs	r3, #1
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	e008      	b.n	800322e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <xTaskGetSchedulerState+0x38>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003224:	2302      	movs	r3, #2
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	e001      	b.n	800322e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800322e:	687b      	ldr	r3, [r7, #4]
	}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000114 	.word	0x20000114
 8003240:	20000130 	.word	0x20000130

08003244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d06c      	beq.n	8003334 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <xTaskPriorityDisinherit+0xfc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	429a      	cmp	r2, r3
 8003262:	d009      	beq.n	8003278 <xTaskPriorityDisinherit+0x34>
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e7fe      	b.n	8003276 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <xTaskPriorityDisinherit+0x50>
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	e7fe      	b.n	8003292 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d044      	beq.n	8003334 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d140      	bne.n	8003334 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fda4 	bl	8001e04 <uxListRemove>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c6:	491f      	ldr	r1, [pc, #124]	; (8003344 <xTaskPriorityDisinherit+0x100>)
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xTaskPriorityDisinherit+0xaa>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	2201      	movs	r2, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <xTaskPriorityDisinherit+0x104>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4013      	ands	r3, r2
 80032ea:	4a17      	ldr	r2, [pc, #92]	; (8003348 <xTaskPriorityDisinherit+0x104>)
 80032ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f1c3 0205 	rsb	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	2201      	movs	r2, #1
 8003308:	409a      	lsls	r2, r3
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <xTaskPriorityDisinherit+0x104>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <xTaskPriorityDisinherit+0x104>)
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <xTaskPriorityDisinherit+0x100>)
 8003322:	441a      	add	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f7fe fd0d 	bl	8001d4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003334:	697b      	ldr	r3, [r7, #20]
	}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000030 	.word	0x20000030
 8003344:	20000034 	.word	0x20000034
 8003348:	20000110 	.word	0x20000110

0800334c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fd4e 	bl	8001e04 <uxListRemove>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	2201      	movs	r2, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <prvAddCurrentTaskToDelayedList+0xb8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4013      	ands	r3, r2
 8003382:	4a20      	ldr	r2, [pc, #128]	; (8003404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800338c:	d10a      	bne.n	80033a4 <prvAddCurrentTaskToDelayedList+0x58>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	481a      	ldr	r0, [pc, #104]	; (8003408 <prvAddCurrentTaskToDelayedList+0xbc>)
 800339e:	f7fe fcd4 	bl	8001d4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033a2:	e026      	b.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d209      	bcs.n	80033d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <prvAddCurrentTaskToDelayedList+0xc0>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3304      	adds	r3, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7fe fce2 	bl	8001d92 <vListInsert>
}
 80033ce:	e010      	b.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe fcd8 	bl	8001d92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d202      	bcs.n	80033f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6013      	str	r3, [r2, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000010c 	.word	0x2000010c
 8003400:	20000030 	.word	0x20000030
 8003404:	20000110 	.word	0x20000110
 8003408:	200000f4 	.word	0x200000f4
 800340c:	200000c4 	.word	0x200000c4
 8003410:	200000c0 	.word	0x200000c0
 8003414:	20000128 	.word	0x20000128

08003418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003422:	f000 fad1 	bl	80039c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <xTimerCreateTimerTask+0x54>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <xTimerCreateTimerTask+0x58>)
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	2302      	movs	r3, #2
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800343c:	490d      	ldr	r1, [pc, #52]	; (8003474 <xTimerCreateTimerTask+0x5c>)
 800343e:	480e      	ldr	r0, [pc, #56]	; (8003478 <xTimerCreateTimerTask+0x60>)
 8003440:	f7ff f9a6 	bl	8002790 <xTaskCreate>
 8003444:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <xTimerCreateTimerTask+0x48>
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	e7fe      	b.n	800345e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003460:	687b      	ldr	r3, [r7, #4]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000164 	.word	0x20000164
 8003470:	20000168 	.word	0x20000168
 8003474:	08004304 	.word	0x08004304
 8003478:	080035ad 	.word	0x080035ad

0800347c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <xTimerGenericCommand+0x2c>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	e7fe      	b.n	80034a6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <xTimerGenericCommand+0x94>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02a      	beq.n	8003506 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	dc18      	bgt.n	80034f4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034c2:	f7ff fea1 	bl	8003208 <xTaskGetSchedulerState>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d109      	bne.n	80034e0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <xTimerGenericCommand+0x94>)
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	f107 0114 	add.w	r1, r7, #20
 80034d4:	2300      	movs	r3, #0
 80034d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d8:	f7fe fd84 	bl	8001fe4 <xQueueGenericSend>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24
 80034de:	e012      	b.n	8003506 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <xTimerGenericCommand+0x94>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	f107 0114 	add.w	r1, r7, #20
 80034e8:	2300      	movs	r3, #0
 80034ea:	2200      	movs	r2, #0
 80034ec:	f7fe fd7a 	bl	8001fe4 <xQueueGenericSend>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24
 80034f2:	e008      	b.n	8003506 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <xTimerGenericCommand+0x94>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	f107 0114 	add.w	r1, r7, #20
 80034fc:	2300      	movs	r3, #0
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	f7fe fe6a 	bl	80021d8 <xQueueGenericSendFromISR>
 8003504:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20000164 	.word	0x20000164

08003514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <prvProcessExpiredTimer+0x94>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fc69 	bl	8001e04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	18d1      	adds	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	6978      	ldr	r0, [r7, #20]
 800354e:	f000 f8d1 	bl	80036f4 <prvInsertTimerInActiveList>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01e      	beq.n	8003596 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003558:	2300      	movs	r3, #0
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2100      	movs	r1, #0
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff8a 	bl	800347c <xTimerGenericCommand>
 8003568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d112      	bne.n	8003596 <prvProcessExpiredTimer+0x82>
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e7fe      	b.n	8003582 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	4798      	blx	r3
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2000015c 	.word	0x2000015c

080035ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f857 	bl	800366c <prvGetNextExpireTime>
 80035be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4619      	mov	r1, r3
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f803 	bl	80035d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035ca:	f000 f8d5 	bl	8003778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035ce:	e7f1      	b.n	80035b4 <prvTimerTask+0x8>

080035d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035da:	f7ff fa63 	bl	8002aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f866 	bl	80036b4 <prvSampleTimeNow>
 80035e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d130      	bne.n	8003652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <prvProcessTimerOrBlockTask+0x3c>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d806      	bhi.n	800360c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035fe:	f7ff fa5f 	bl	8002ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff85 	bl	8003514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800360a:	e024      	b.n	8003656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <prvProcessTimerOrBlockTask+0x90>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <prvProcessTimerOrBlockTask+0x50>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <prvProcessTimerOrBlockTask+0x52>
 8003620:	2300      	movs	r3, #0
 8003622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <prvProcessTimerOrBlockTask+0x94>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	f7ff f879 	bl	8002728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003636:	f7ff fa43 	bl	8002ac0 <xTaskResumeAll>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <prvProcessTimerOrBlockTask+0x98>)
 8003642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
}
 8003650:	e001      	b.n	8003656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003652:	f7ff fa35 	bl	8002ac0 <xTaskResumeAll>
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000160 	.word	0x20000160
 8003664:	20000164 	.word	0x20000164
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <prvGetNextExpireTime+0x44>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <prvGetNextExpireTime+0x16>
 800367e:	2201      	movs	r2, #1
 8003680:	e000      	b.n	8003684 <prvGetNextExpireTime+0x18>
 8003682:	2200      	movs	r2, #0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <prvGetNextExpireTime+0x44>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e001      	b.n	80036a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000015c 	.word	0x2000015c

080036b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036bc:	f7ff fa9c 	bl	8002bf8 <xTaskGetTickCount>
 80036c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <prvSampleTimeNow+0x3c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d205      	bcs.n	80036d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036cc:	f000 f918 	bl	8003900 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e002      	b.n	80036de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <prvSampleTimeNow+0x3c>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000016c 	.word	0x2000016c

080036f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d812      	bhi.n	8003740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e01b      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <prvInsertTimerInActiveList+0x7c>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe fb2a 	bl	8001d92 <vListInsert>
 800373e:	e012      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d206      	bcs.n	8003756 <prvInsertTimerInActiveList+0x62>
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e007      	b.n	8003766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <prvInsertTimerInActiveList+0x80>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7fe fb16 	bl	8001d92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000160 	.word	0x20000160
 8003774:	2000015c 	.word	0x2000015c

08003778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800377e:	e0ac      	b.n	80038da <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f2c0 80a8 	blt.w	80038d8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fb33 	bl	8001e04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff87 	bl	80036b4 <prvSampleTimeNow>
 80037a6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	f200 8095 	bhi.w	80038da <prvProcessReceivedCommands+0x162>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <prvProcessReceivedCommands+0x40>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e1 	.word	0x080037e1
 80037c4:	08003853 	.word	0x08003853
 80037c8:	08003867 	.word	0x08003867
 80037cc:	080038af 	.word	0x080038af
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e1 	.word	0x080037e1
 80037d8:	08003853 	.word	0x08003853
 80037dc:	08003867 	.word	0x08003867
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	18d1      	adds	r1, r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003800:	f7ff ff78 	bl	80036f4 <prvInsertTimerInActiveList>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d067      	beq.n	80038da <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05c      	beq.n	80038da <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	441a      	add	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	2100      	movs	r1, #0
 8003830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003832:	f7ff fe23 	bl	800347c <xTimerGenericCommand>
 8003836:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d14d      	bne.n	80038da <prvProcessReceivedCommands+0x162>
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e7fe      	b.n	8003850 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003864:	e039      	b.n	80038da <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <prvProcessReceivedCommands+0x122>
 8003886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e7fe      	b.n	8003898 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	18d1      	adds	r1, r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a8:	f7ff ff24 	bl	80036f4 <prvInsertTimerInActiveList>
					break;
 80038ac:	e015      	b.n	80038da <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80038bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038be:	f000 fbb9 	bl	8004034 <vPortFree>
 80038c2:	e00a      	b.n	80038da <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80038d6:	e000      	b.n	80038da <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80038d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <prvProcessReceivedCommands+0x184>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f107 0108 	add.w	r1, r7, #8
 80038e2:	2200      	movs	r2, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fd0b 	bl	8002300 <xQueueReceive>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f47f af47 	bne.w	8003780 <prvProcessReceivedCommands+0x8>
	}
}
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000164 	.word	0x20000164

08003900 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003906:	e047      	b.n	8003998 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003908:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003912:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fa6f 	bl	8001e04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d02d      	beq.n	8003998 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	429a      	cmp	r2, r3
 800394c:	d90e      	bls.n	800396c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f7fe fa14 	bl	8001d92 <vListInsert>
 800396a:	e015      	b.n	8003998 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	2100      	movs	r1, #0
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f7ff fd80 	bl	800347c <xTimerGenericCommand>
 800397c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <prvSwitchTimerLists+0x98>
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	e7fe      	b.n	8003996 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1b2      	bne.n	8003908 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <prvSwitchTimerLists+0xc4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <prvSwitchTimerLists+0xc0>)
 80039ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <prvSwitchTimerLists+0xc4>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	6013      	str	r3, [r2, #0]
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2000015c 	.word	0x2000015c
 80039c4:	20000160 	.word	0x20000160

080039c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80039cc:	f000 f956 	bl	8003c7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80039d0:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <prvCheckForValidListAndQueue+0x54>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11d      	bne.n	8003a14 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80039d8:	4811      	ldr	r0, [pc, #68]	; (8003a20 <prvCheckForValidListAndQueue+0x58>)
 80039da:	f7fe f989 	bl	8001cf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80039de:	4811      	ldr	r0, [pc, #68]	; (8003a24 <prvCheckForValidListAndQueue+0x5c>)
 80039e0:	f7fe f986 	bl	8001cf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <prvCheckForValidListAndQueue+0x60>)
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <prvCheckForValidListAndQueue+0x58>)
 80039e8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <prvCheckForValidListAndQueue+0x64>)
 80039ec:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <prvCheckForValidListAndQueue+0x5c>)
 80039ee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80039f0:	2200      	movs	r2, #0
 80039f2:	210c      	movs	r1, #12
 80039f4:	200a      	movs	r0, #10
 80039f6:	f7fe fa97 	bl	8001f28 <xQueueGenericCreate>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <prvCheckForValidListAndQueue+0x54>)
 80039fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <prvCheckForValidListAndQueue+0x54>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <prvCheckForValidListAndQueue+0x54>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4908      	ldr	r1, [pc, #32]	; (8003a30 <prvCheckForValidListAndQueue+0x68>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fe62 	bl	80026d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a14:	f000 f960 	bl	8003cd8 <vPortExitCritical>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000164 	.word	0x20000164
 8003a20:	20000134 	.word	0x20000134
 8003a24:	20000148 	.word	0x20000148
 8003a28:	2000015c 	.word	0x2000015c
 8003a2c:	20000160 	.word	0x20000160
 8003a30:	0800430c 	.word	0x0800430c

08003a34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b04      	subs	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b04      	subs	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <pxPortInitialiseStack+0x64>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b14      	subs	r3, #20
 8003a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3b04      	subs	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f06f 0202 	mvn.w	r2, #2
 8003a82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b20      	subs	r3, #32
 8003a88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	08003a9d 	.word	0x08003a9d

08003a9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <prvTaskExitError+0x50>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aae:	d009      	beq.n	8003ac4 <prvTaskExitError+0x28>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e7fe      	b.n	8003ac2 <prvTaskExitError+0x26>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ad6:	bf00      	nop
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0fc      	beq.n	8003ad8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	2000000c 	.word	0x2000000c

08003af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <pxCurrentTCBConst2>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	f380 8809 	msr	PSP, r0
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	4770      	bx	lr
 8003b0c:	f3af 8000 	nop.w

08003b10 <pxCurrentTCBConst2>:
 8003b10:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <prvPortStartFirstTask+0x24>)
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f380 8808 	msr	MSP, r0
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8814 	msr	CONTROL, r0
 8003b2a:	b662      	cpsie	i
 8003b2c:	b661      	cpsie	f
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	df00      	svc	0
 8003b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b3a:	bf00      	nop
 8003b3c:	e000ed08 	.word	0xe000ed08

08003b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b46:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <xPortStartScheduler+0x118>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <xPortStartScheduler+0x11c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <xPortStartScheduler+0x24>
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e7fe      	b.n	8003b62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b64:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <xPortStartScheduler+0x118>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <xPortStartScheduler+0x120>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d109      	bne.n	8003b82 <xPortStartScheduler+0x42>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e7fe      	b.n	8003b80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <xPortStartScheduler+0x124>)
 8003b84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <xPortStartScheduler+0x128>)
 8003ba8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bac:	2207      	movs	r2, #7
 8003bae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bb0:	e009      	b.n	8003bc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d0ef      	beq.n	8003bb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1c3 0307 	rsb	r3, r3, #7
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d009      	beq.n	8003bf2 <xPortStartScheduler+0xb2>
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	e7fe      	b.n	8003bf0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <xPortStartScheduler+0x12c>)
 8003c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <xPortStartScheduler+0x130>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <xPortStartScheduler+0x130>)
 8003c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <xPortStartScheduler+0x130>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <xPortStartScheduler+0x130>)
 8003c22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c28:	f000 f8d6 	bl	8003dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <xPortStartScheduler+0x134>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c32:	f000 f8f5 	bl	8003e20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <xPortStartScheduler+0x138>)
 8003c3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c42:	f7ff ff69 	bl	8003b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c46:	f7ff f89f 	bl	8002d88 <vTaskSwitchContext>
	prvTaskExitError();
 8003c4a:	f7ff ff27 	bl	8003a9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	410fc271 	.word	0x410fc271
 8003c60:	410fc270 	.word	0x410fc270
 8003c64:	e000e400 	.word	0xe000e400
 8003c68:	20000170 	.word	0x20000170
 8003c6c:	20000174 	.word	0x20000174
 8003c70:	e000ed20 	.word	0xe000ed20
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	e000ef34 	.word	0xe000ef34

08003c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <vPortEnterCritical+0x54>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <vPortEnterCritical+0x54>)
 8003c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <vPortEnterCritical+0x54>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10e      	bne.n	8003cc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <vPortEnterCritical+0x58>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <vPortEnterCritical+0x48>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	e7fe      	b.n	8003cc2 <vPortEnterCritical+0x46>
	}
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	2000000c 	.word	0x2000000c
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <vPortExitCritical+0x4c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <vPortExitCritical+0x22>
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	e7fe      	b.n	8003cf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <vPortExitCritical+0x4c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <vPortExitCritical+0x4c>)
 8003d02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <vPortExitCritical+0x4c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <vPortExitCritical+0x3e>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c
	...

08003d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d30:	f3ef 8009 	mrs	r0, PSP
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <pxCurrentTCBConst>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	f01e 0f10 	tst.w	lr, #16
 8003d40:	bf08      	it	eq
 8003d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4a:	6010      	str	r0, [r2, #0]
 8003d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d54:	f380 8811 	msr	BASEPRI, r0
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f7ff f812 	bl	8002d88 <vTaskSwitchContext>
 8003d64:	f04f 0000 	mov.w	r0, #0
 8003d68:	f380 8811 	msr	BASEPRI, r0
 8003d6c:	bc09      	pop	{r0, r3}
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	6808      	ldr	r0, [r1, #0]
 8003d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d76:	f01e 0f10 	tst.w	lr, #16
 8003d7a:	bf08      	it	eq
 8003d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d80:	f380 8809 	msr	PSP, r0
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	f3af 8000 	nop.w

08003d90 <pxCurrentTCBConst>:
 8003d90:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop

08003d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003db0:	f7fe ff32 	bl	8002c18 <xTaskIncrementTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <SysTick_Handler+0x3c>)
 8003dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <vPortSetupTimerInterrupt+0x34>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <vPortSetupTimerInterrupt+0x38>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <vPortSetupTimerInterrupt+0x3c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <vPortSetupTimerInterrupt+0x40>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <vPortSetupTimerInterrupt+0x44>)
 8003df6:	3b01      	subs	r3, #1
 8003df8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dfa:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <vPortSetupTimerInterrupt+0x34>)
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000e010 	.word	0xe000e010
 8003e10:	e000e018 	.word	0xe000e018
 8003e14:	20000000 	.word	0x20000000
 8003e18:	10624dd3 	.word	0x10624dd3
 8003e1c:	e000e014 	.word	0xe000e014

08003e20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e30 <vPortEnableVFP+0x10>
 8003e24:	6801      	ldr	r1, [r0, #0]
 8003e26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e2a:	6001      	str	r1, [r0, #0]
 8003e2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e2e:	bf00      	nop
 8003e30:	e000ed88 	.word	0xe000ed88

08003e34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e3a:	f3ef 8305 	mrs	r3, IPSR
 8003e3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d913      	bls.n	8003e6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <vPortValidateInterruptPriority+0x6c>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <vPortValidateInterruptPriority+0x70>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	7afa      	ldrb	r2, [r7, #11]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d209      	bcs.n	8003e6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	e7fe      	b.n	8003e6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <vPortValidateInterruptPriority+0x74>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <vPortValidateInterruptPriority+0x78>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d909      	bls.n	8003e92 <vPortValidateInterruptPriority+0x5e>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	e7fe      	b.n	8003e90 <vPortValidateInterruptPriority+0x5c>
	}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e3f0 	.word	0xe000e3f0
 8003ea4:	20000170 	.word	0x20000170
 8003ea8:	e000ed0c 	.word	0xe000ed0c
 8003eac:	20000174 	.word	0x20000174

08003eb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ebc:	f7fe fdf2 	bl	8002aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ec0:	4b57      	ldr	r3, [pc, #348]	; (8004020 <pvPortMalloc+0x170>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ec8:	f000 f90c 	bl	80040e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ecc:	4b55      	ldr	r3, [pc, #340]	; (8004024 <pvPortMalloc+0x174>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 808c 	bne.w	8003ff2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01c      	beq.n	8003f1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	3308      	adds	r3, #8
 8003efa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <pvPortMalloc+0x6a>
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e7fe      	b.n	8003f18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d068      	beq.n	8003ff2 <pvPortMalloc+0x142>
 8003f20:	4b41      	ldr	r3, [pc, #260]	; (8004028 <pvPortMalloc+0x178>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d863      	bhi.n	8003ff2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <pvPortMalloc+0x17c>)
 8003f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <pvPortMalloc+0x17c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f34:	e004      	b.n	8003f40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d903      	bls.n	8003f52 <pvPortMalloc+0xa2>
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f1      	bne.n	8003f36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <pvPortMalloc+0x170>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d04a      	beq.n	8003ff2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	4413      	add	r3, r2
 8003f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	1ad2      	subs	r2, r2, r3
 8003f76:	2308      	movs	r3, #8
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d91e      	bls.n	8003fbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <pvPortMalloc+0xf4>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e7fe      	b.n	8003fa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fb6:	69b8      	ldr	r0, [r7, #24]
 8003fb8:	f000 f8f6 	bl	80041a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <pvPortMalloc+0x178>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <pvPortMalloc+0x178>)
 8003fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <pvPortMalloc+0x178>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <pvPortMalloc+0x180>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <pvPortMalloc+0x178>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <pvPortMalloc+0x180>)
 8003fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <pvPortMalloc+0x174>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ff2:	f7fe fd65 	bl	8002ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <pvPortMalloc+0x164>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e7fe      	b.n	8004012 <pvPortMalloc+0x162>
	return pvReturn;
 8004014:	69fb      	ldr	r3, [r7, #28]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3728      	adds	r7, #40	; 0x28
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20003c18 	.word	0x20003c18
 8004024:	20003c24 	.word	0x20003c24
 8004028:	20003c1c 	.word	0x20003c1c
 800402c:	20003c10 	.word	0x20003c10
 8004030:	20003c20 	.word	0x20003c20

08004034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d046      	beq.n	80040d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004046:	2308      	movs	r3, #8
 8004048:	425b      	negs	r3, r3
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4b20      	ldr	r3, [pc, #128]	; (80040dc <vPortFree+0xa8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <vPortFree+0x42>
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e7fe      	b.n	8004074 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <vPortFree+0x5e>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	e7fe      	b.n	8004090 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <vPortFree+0xa8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d019      	beq.n	80040d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d115      	bne.n	80040d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <vPortFree+0xa8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040b8:	f7fe fcf4 	bl	8002aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <vPortFree+0xac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <vPortFree+0xac>)
 80040c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f000 f86c 	bl	80041a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040d0:	f7fe fcf6 	bl	8002ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20003c24 	.word	0x20003c24
 80040e0:	20003c1c 	.word	0x20003c1c

080040e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ea:	f643 2398 	movw	r3, #15000	; 0x3a98
 80040ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <prvHeapInit+0xac>)
 80040f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <prvHeapInit+0xac>)
 8004114:	4413      	add	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <prvHeapInit+0xb0>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <prvHeapInit+0xb0>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004130:	2208      	movs	r2, #8
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvHeapInit+0xb4>)
 8004144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <prvHeapInit+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <prvHeapInit+0xb4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <prvHeapInit+0xb4>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <prvHeapInit+0xb8>)
 8004172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <prvHeapInit+0xbc>)
 800417a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvHeapInit+0xc0>)
 800417e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	20000178 	.word	0x20000178
 8004194:	20003c10 	.word	0x20003c10
 8004198:	20003c18 	.word	0x20003c18
 800419c:	20003c20 	.word	0x20003c20
 80041a0:	20003c1c 	.word	0x20003c1c
 80041a4:	20003c24 	.word	0x20003c24

080041a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <prvInsertBlockIntoFreeList+0xac>)
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e002      	b.n	80041bc <prvInsertBlockIntoFreeList+0x14>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d8f7      	bhi.n	80041b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d108      	bne.n	80041ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	441a      	add	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d118      	bne.n	8004230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d00d      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvInsertBlockIntoFreeList+0xb0>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e003      	b.n	8004238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d002      	beq.n	8004246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20003c10 	.word	0x20003c10
 8004258:	20003c18 	.word	0x20003c18

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4e0d      	ldr	r6, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1ba4      	subs	r4, r4, r6
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2500      	movs	r5, #0
 8004268:	42a5      	cmp	r5, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4e0b      	ldr	r6, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 f82c 	bl	80042cc <_init>
 8004274:	1ba4      	subs	r4, r4, r6
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2500      	movs	r5, #0
 800427a:	42a5      	cmp	r5, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004284:	4798      	blx	r3
 8004286:	3501      	adds	r5, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800428e:	4798      	blx	r3
 8004290:	3501      	adds	r5, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004334 	.word	0x08004334
 8004298:	08004334 	.word	0x08004334
 800429c:	08004334 	.word	0x08004334
 80042a0:	08004338 	.word	0x08004338

080042a4 <memcpy>:
 80042a4:	b510      	push	{r4, lr}
 80042a6:	1e43      	subs	r3, r0, #1
 80042a8:	440a      	add	r2, r1
 80042aa:	4291      	cmp	r1, r2
 80042ac:	d100      	bne.n	80042b0 <memcpy+0xc>
 80042ae:	bd10      	pop	{r4, pc}
 80042b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b8:	e7f7      	b.n	80042aa <memcpy+0x6>

080042ba <memset>:
 80042ba:	4402      	add	r2, r0
 80042bc:	4603      	mov	r3, r0
 80042be:	4293      	cmp	r3, r2
 80042c0:	d100      	bne.n	80042c4 <memset+0xa>
 80042c2:	4770      	bx	lr
 80042c4:	f803 1b01 	strb.w	r1, [r3], #1
 80042c8:	e7f9      	b.n	80042be <memset+0x4>
	...

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
